import string
from collections import Counter
import numpy as np

freq_map = {
    'A': 0.082, 'B': 0.015, 'C': 0.028, 'D': 0.043, 'E': 0.13,
    'F': 0.022, 'G': 0.02, 'H': 0.061, 'I': 0.07, 'J': 0.0015,
    'K': 0.0077, 'L': 0.04, 'M': 0.024, 'N': 0.067, 'O': 0.075,
    'P': 0.019, 'Q': 0.00095, 'R': 0.06, 'S': 0.063, 'T': 0.091,
    'U': 0.028, 'V': 0.0098, 'W': 0.024, 'X': 0.0015, 'Y': 0.02,
    'Z': 0.00074
}

# Get key length (Question 1)
def get_key_length(ciphertext, max_key_length=7):
    def index_of_coincidence(text):
        freqs = Counter(text)
        N = len(text)
        return sum(f * (f - 1) for f in freqs.values()) / (N * (N - 1)) if N > 1 else 0
    
    best_guess = 1
    best_ic = 0
    for key_len in range(1, max_key_length + 1):
        segments = [''.join(ciphertext[i::key_len]) for i in range(key_len)]
        avg_ic = np.mean([index_of_coincidence(segment) for segment in segments])
        if avg_ic > best_ic:
            best_ic = avg_ic
            best_guess = key_len
    return best_guess

# Chi-square test (Question 2)
def chi_square_stat(observed, expected):
    return sum(((observed[c] - expected[c]) ** 2) / expected[c] for c in string.ascii_uppercase if expected[c] > 0)

# Find key (Question 2)
def find_key(ciphertext, key_length, freq_map):
    key = ''
    expected_freqs = {c: freq * len(ciphertext) / key_length for c, freq in freq_map.items()}
    for i in range(key_length):
        segment = ''.join(ciphertext[i::key_length])
        min_chi_sq = float('inf')
        best_shift = 0
        for shift in range(26):
            shifted_segment = ''.join(chr((ord(c) - ord('A') - shift) % 26 + ord('A')) for c in segment)
            observed_freqs = Counter(shifted_segment)
            chi_sq = chi_square_stat(observed_freqs, expected_freqs)
            if chi_sq < min_chi_sq:
                min_chi_sq = chi_sq
                best_shift = shift
        key += chr(best_shift + ord('A'))
    return key

# Decrypt (Question 3)
def decrypt_vigenere(ciphertext, key):
    """Decrypts the Vigenère cipher using the identified key."""
    plaintext = []
    key_length = len(key)
    
    for i, char in enumerate(ciphertext):
        shift = ord(key[i % key_length]) - 65
        decrypted_char = chr(((ord(char) - shift - 65) % 26) + 65)
        plaintext.append(decrypted_char)

    return ''.join(plaintext)

if __name__ == "__main__":

    ciphertext = "GFGOAYPCZMWMQCEFNPCNVMPISRJYGFKLGCGHHLKNRBUNNRGMBDCGRPKWNUJYAGPNUCEIHPUYBDJOZYPYICPNFGVVRAQGRQPYPCUMNPAZBPQHRNGICJGNBBKMFMNPRRJYCMNCGGEUYZQHQQYBVAJBNTGWBLPYPRGXGFGGJGVBNLQNUCTUABVINQUOZCCGBLINUCRIJCTMBDVBRCCLGFVBRQGJNPCNRYPXROWUYQVUGGQHGMYBVAJNUCNUJQQZAYVOECCHQMHHNRWLRQIIQCPNVRNYGFGGNBGWRLVLRQRYPRVIGFGICGPCBLUISKCHXGPXECSOVPGMGFCNGFGSFFQOYBFYPJCLRRJYPYWMRQYBVAJCZNGFGFGGGMVBRQGJNPCNVMPQRFQFQRJYFCVLHRJMGMDYFCNZRTKXRLVNUYVUYJOYAYTYPPGUGCFYDSCFGFCNGFGSNPGYABQQRBDSGFGCEATYNRQLJGVBPCTNNGPOAYNCRLCVYCTCTFVMGFCNNKQHTRJYFCCLRJKZRJKVRPVSNLFNUCROEQWCGMHBNNRCACUMGFCNGMUYPSTYGFGMRPKAURUABTGLAKGHGQCLRGPMGGVOGCFUZMPAZCPXRPKPVLINUCKLWSUNCMYYEQHLBKVBRAQHFCPNBDVBREQPRPPYQRJUGUJYACXYEYPSSMTGBDIIICTHZCPNOCEIZCUXRQVLHAVCICVIGFGMRCPXFGVCFRJYEGIBGMHNUCRYBNNYGMCFGCTIERQUOMNCFFKNNLFNBGPMGGVOGCPYJEQPRPPGRLVFNWKHTGVMSMWHQYVCBLQHFSEBCPKHPGRFRQCHQMTANLKTVLICGQRIJCTMVLUOPFHIEKCMGMVBRKUBNJNMRCOGBQVFVIGFLRQYSDGWGRJYVPUUSCVSNLFBNNRCACUMCPWXRLEYVLFYRBYCYJFCPRCNRRJUGEQPRPPGRLVMYMPARQVUOJKMUCFMUMWFQLQNOCEBNLIYQDQLYGIBGYPXGPCHFGGHGACOFCUUABCWPMTXVLIFLYNFRVRYEGGHPCJUGFUBBUPNUYVGNLMCABCLRKQLRBKMCMUYQRQMHDHYEUJCYCGPVJUUECUOSDGLNZNYGFCHGMTCTFVNUCOMRJXYFZAUOMNCFFKHTRJYSMTGFRQQUGEBGFGSNPGUPAWMGMOYQZWNJFGHNJQHTRTUVLQZNZWMRQCHQSUOENCNVMPMCSTMHGPAVLXUEGCVYWVBRQCGRMDDRAVYIGPWRQCXRQKAARQLRBWWRRJYZSPXRPCVFMNOGCFYFNQNVQOCGGUNUCKLEGIBGGVCFRJYVPFOGWVIGFTIJMHZFSEBTMXYELOYARCHQRQJEMXCQCPYJEWUEBUZBPVBRGTZHRWLRQGWHPKNLQWWUFCMOCGHGFGJNRKYARUOSDGLNLEYBDVBRQGWBJQHVCUUABUOPFKMAMYNUCPYPCUMVRAQUGEBPMPMGPCCAQVBRKVINJVYERJYVPHIEKGLFWUNRKUISEQPRPPGRLVNUCJCFRQLLMHNUCRLRQGHGIKHTMHAECCNOPKNNGPCFYJCFRQLLMHLRNGUGCFCAHWLVCUUABWMHPRUGGQHFYNFUYXCAEKHQGTYPRQVWCENGFGYFRCVYGUBZCPNBDCHNZUIYSVYGWTUALAIICTNUCUYFRCNRQVICPQPRRJCFJGNSYENFZGMHZOCGRGXGMCWNLFCQUQLYBJYUYULRDWMRBJCFYUMRLVNBJCQFRJYZMUNJFQFRQQGRYPXACEYFQCLLDQLGFGJHZNCPEQIQFGBNQHIEZKXQCPBVQIIICTHBPUNBNCMFJCQFMHCZKGXVYVYNLFJECUMVLICZNQLGYPWRSPFRQUMHQRYABGXVLVBRGTICCTUGGQHGGNFUGUUFQGHGQJIHJFVRMDNNGPYQYPXJFGHFMUOFNGHQCFBRFCMHRVYEJAHRENYPRGXGMCNGCPXGMVBRKJYUYULRDWMRBVICYUMBRJYEJCQFDQLGFGUPAQGZMFUGGQHBDNUEEGXVQVLVAVMBDRYBNNYHLNYFQVBBQGJRMRFRUQOYBTYYGPKHGUBGFGLVEJNBDTYCPGMRLVUGGQHVLVBRJGAVQNUGSTYNPKAURKHRQVCZYDFRRQNUCOUABHIEKKXNZNYGMVSEYPNFMPFLFGBNQEUYJGXGMIYGFGLYCICFJCNVTGVBBKYFYVJYYEYFSPOFSCFHLEIZDQLGYDFRYPXQGUNNLVZEMONUCFYCMUCGMTSBDVBRGTJHZNCPPGWBPFMSMTNUCUIYCROENQMRMHZNRKAHGPAGFGGVLVIPMOJYGCHPCYCGFJCFKGUFSTYFFGBNQFCFQQFICFLRNTYFCPNNRKPRFQOFCULRNGUGCFFLDQLBNRIFGPAJGVBZYPFLDKLZLGMFFKMVLXUFGQHFMPNUCTCTFVMBDVBRNGICJGBRFCMECHOFCFZBPCFBLINVKGUSRGLFSEBQGUMBJWNVMPMGMEUHQGIGFGLFRQVRCNYPRGXJFGLRZANUCNYTGUFNRKPRNQQRPUCAACJNZNYBDCHAGJCYYVCBLJUICTYGSTHRBVIGFGJRMRFRYVFNPIYSMTNUCKLRVGLPGUYGFGMGYVYECOUVLKHTGPNUCOYNLVCZCGRCMUYQRQUYJVBRBCHTCTMBDKHIYUCBLHLBKYCGFQOGYPXPMPPHJUCBLUQVRJCAFGBNQGHQCCPBPGXGMRLRTGHGRJYCMROYYVCBLQZGFGMRQVUGCUZBPVBNRROENQMRMDMGPWWGGPAGFGFNUUZBPPUGSTUYGBUGGQHBDHIECKAACTMECHOFGPAGMRUFQQNUCTMGMGHPMWLNEGNUCKLZGILNRKIAFKNUCTUABTUVQKHTRJYPMPXVRKIAQQZACYUCNTICPKUGGQHFMHFNLFMUCJUFMDMGPWWGCFNUCCXZGPCFRTUGGQHBDLOFRKWRZALRDWMVLIBVQCMFCPNGMNUJQHIECUNNZNCFFKHTHWXVAKUEWRIJCTMUCJUFKCXRHWXTCUXRNGHQCPNBLJCFUKFYYNIACHIERJYGCPOECQZGFGCEMHZVAGMNLFNUCCGBSPNNLFJNWOYARQZGFGCEQCFNPKYFFGBNQGLRAVYQYOOYRKNHBGISLGQBDHCPCUUABUYARJCGFGLFUCLZQQZBDHCPCTMGMJUEYUMBSTJRMRFRYPXRYVIHRVBRGTMHZUNNLEYUCJUFIGJGYOIAEWMVLVCZCUISNGUPCUNNLFCAECLZGGMJGVBBSVNUCEIAQGHGMHIHPNYTGUFNRWLRFGBNQCZSCENRBVIECPXRPVBRKKFVRCLLGPXRNGHQCPNBDCHQQWJRPKIERQWVTKFCMYYEFGBNQEIZZKHRBYCGFQNUCTMGMUOOHGWGSUNBYLOEGUXVAVCBLHIECKAARQIHPEIAQVCGSVCBLCHQSPUPIPIJJGXTCFVLMWLYYYMTGXCAEJCFYUMRLVNBRJYVPCWGQQZCPGNRLFYQJGAVQNUGGQHSMTKHYTNRPKHTJCLTCDIQGGMBDCLZCFNEMQJFYOIAEWMSMTJEMVYPRKHTRJYZZAGBAMNEGCFSPQGCSPCFFOYARHIEYPSZSTXRPUQUGEBGFGSFFQOYBEIZKKNBLVBRGPBNZKNNLVMBDVBRQGMGYVYFDQLPSVNVLIISDQOERTUQCYCGFCFYNCLGQQZGFGQBPNXSMTCZNQMVLINNVGMBLWMJGVBBSVIHPEIAQGHGDQLQCRLVTKHTSUCAKCHLACMRQQZGFGVRLGZVRUISRTCNJDSWSTSSMTNEYPMCMTNVLIOFZGSBLFMRYUNBZGNEGGXSMTJECVYABGXBDHYAQGMSMTUOMNCFFKHTRJYSPGYFWUNRKQZRLIFVQJFNUUCAYPYVEJVBPKHTNTIIGPWRCUNNZNCFFKHTRJYECKHNLCLOGVLNPAABTGLAKGHGYPXRLNUEEKHTGVMOMWHQYTCRQUINQVIECPXRPKNNRQHPCCHRVCGCJGUABHCGGPMGPWGRLVZBPKHGPQXHAKHTRJYFYOYNZUIYSVYESNYVLVBRQGWBJQHVCUZBPVUXGPANUCSBSTWUYTNRPUUOMNCFFKHTMWLZMUNIYNONZNYYYYMNLFUYRGLVLIZHLFUZCPNNJNSGFGZBPOMBDQOEEQPRPPGRLVMSMTMHQRYABKHTMWLBUPFREKMYYVOECUUABFYPJCLVLINUCOMRJXYFGPPRQVYQUKNUNQQRPVIYCICFJCNRDQLHQKHNJNWNQGMJFCNFMGPRPJYUYUUOBKWNRGXTMXYELOYARJYECDSQCEFNPKHTSUIHRQZUGUJEMVYPRKIAYPXJYICAEYUEYIUVLUNHQJYUYUJYSPXRPGXBSTMRYULNTCARBQOEAQUFRUVHPPYQMWLGMYHFYPXQCUNEMAYQRJYYGXYFMHIHPRYBNNYUCKMNRVBVQVCZCVLNLUJBPVCAENUEEGUEKKYFMHZBPGCTLOYEAGHNPKYFRQWBKRFRRGNUCYIEIUISBGUGFFYFMNUGGQHNLFNLPCHAWCFECCXLZGAHLYCGFECEAWGFRCHPCUISATORJVSNLFJRPHCQWUWNPEYYWRUEYNFRJGXVLVBRKQMGZCLOYTIHQCARQCHQRQNNJNSHLYIERJNUCJYNBQZNAKPVJKTRBPUGGQHUCJUFAQHFRTUVLGXBSTZRJNIJAKNVXGHFRCERLEUCRKPRMPNUCJCTFUYNQVIOCCLNPOMNECCAQVNUCKLPMWHGPANBZGWBKGNUCGRRAWNVMPYEQQZGFGCEDTCRLFMNLFVECVBECPIERQZNJNNUCOMRJXYFZANUCKLUYPXFFGBNQGRPGVYQBQGRQVCPGPMHPTYPRKIAQCGBLIMGSUUABJUFCPXRYXIECFNBZTCAEQHGFGCAFCVVRCHGQQZBSTZEMPNVCTMGFGGRPECYCUMVLFCNLUUIYIYFUJIFCMHBUPLHJGISUCLSYTYVQWHQGUNVLIOVQJYQBGMGPWWGGQHBDCFYYIYFQGRRQCHQAQHQGVCBLUCACXYEWUNNEGISRJYFCQJCPGMFGQHFUGBNTGJRRKNVMPYQDQLECFLRQUCARJYZMUNUSOVYCVYEKUIHPTYCCCNRBRYGGVCBLUBNTGVRCPUAQYYECFIAJAVLPGJRYVYQGPDHPAUCPKHPCYBBQGWUYTUPRGLVQVBHQOUEIGXOWGPRPAUPRYBVAJGNWFYSGPYNRALNLVCFSPZVRVIOCVBRPWFRPQZNDTYRNGICJGHBPJUICYYOCGHJYPNVLICAYVNRLVCBLVIBSTVEGVCFFDLRRJLRLYYUYXYJYTHRBVBRKHLBKVCZCVIGGOYBDCNGCOJGQDSGFGCEJGAVQNUGSTYGMGRGCPXNLWHJYTLNLVUOJGDHPKMQGENVMPIICTOFUGBNTGLRKKHQCFNUCOISRJYPGTWHKUNNLEYFMHIHPGGVETUGGQHNLFMRRVFRKGHGFGLRUGBNTGUCNGUYCFNBRJYVPPUGGXYWSUNVAGUABOUTLCHVKKNLYPXJCJUICEIAHWLRBVBRKDSGFGNVCUISMWLPMOGBLMCABTYQRQXVQCPBUVBRQGOFSTJNRKIAQYBVAJQBSNXVLGPVRCVYWKHGCTLHNVIHPEIALGWGGQHFYPXPMTLRQRIABGHPCYYZSUNGFGLRDQLRYEKHGGMPCKHGFGHRAGMFGVSJFKWUBGHBSPWRQQOEQGJNPCNVMPUABJIYBVBRKCMJCJIYBVBRPGMGMHGNLMCABGHRKKYFGPQNPKHCCCWRDTCRLFMJCVBRPGZBPGNUCTYCPGMRLVUGGXYFMHNUCWHVRGXFRCNRQQZNKGLVACCAEGHRPCFPMPAECUMNQUYZZNYQYRJRYNCAEVIGFGMHNTYZCLOQEGISRJYJMTFQDQLGFGLRAVCGSFYBDQOEGPNRLVCBLUXBGPNUCPUZCCHQZANUCCOGFQLVRAISRJYTMQXCCQJYCQZGFGMRAQFBLKYFQQFRKPFLNWVYGUBNLFXRANUECVBNRVBRQGOAGVYQAQFBLKYFYTYNLFISPKAURQOTFVNBZGZECGUABKHQCRYABGHGQVUGCUNUYVNUCAUECCVFMNPRBHLBKCFYYNFREKUAAGNBRJYOPKNVQJWEMYHNLFNUYVUYJRIYGVCPYNWBLPYPRKIAZGNJCGHGFGGNLFNUCUNNRGISETYNRDLVRCCAGUUABQOTFVNBZGNBRCFYWFCFQQFICFUABVBNRCMSPGYNLFCABGJRLFYARUNNRGMGFGSUYXYSSNFCMYYERQFRTGSJYTWBLEFHBGJRYEYPMPNEYENNJNCNLEYFCUNNZNCFFEIZKGLPCCHQRQXBYNFBRJYEYENFYPXGFKHTQYBVAJCABGJRLFYARUNNRGMZYAISPKAURFINLFZBPVBRQWJCMTNBDVBVQFYPJCLNRKIAUKNUYHCEKTYYGCHPCQHGFGJEMVYPRKIAMHXVTKHRNTIIGFYAAGQRKWNHYNFLNNYQEGNBCCWUMVBRPQOEJKPRQQOEDQLGSPYFYPXBSTMNATYQFQHBP"  # Replace with actual Vigenère ciphertext

    # Step 1: Determine probable key length
    key_length = get_key_length(ciphertext)
    print(f"Probable Key Length: {key_length}")

    # Step 2: Identify key using Chi-Square test
    key = find_key(ciphertext, key_length, freq_map)
    print(f"Identified Key: {key}")

    # Step 3: Decrypt the text
    plaintext = decrypt_vigenere(ciphertext, key)
    print(f"Decrypted Plaintext: {plaintext}")
